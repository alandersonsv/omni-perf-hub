#!/usr/bin/env node

/**
 * Script de valida√ß√£o de vari√°veis de ambiente
 * Executa antes do build para garantir configura√ß√£o correta
 */

const fs = require('fs');
const path = require('path');

// Cores para output no terminal
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

const log = {
  error: (msg) => console.error(`${colors.red}‚ùå ${msg}${colors.reset}`),
  success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  warning: (msg) => console.warn(`${colors.yellow}‚ö†Ô∏è ${msg}${colors.reset}`),
  info: (msg) => console.log(`${colors.blue}‚ÑπÔ∏è ${msg}${colors.reset}`)
};

// Vari√°veis obrigat√≥rias
const requiredVars = [
  {
    name: 'VITE_SUPABASE_URL',
    description: 'URL do projeto Supabase',
    validate: (value) => {
      if (!value) return 'Vari√°vel n√£o definida';
      if (value.includes('your-project')) return 'Cont√©m placeholder "your-project"';
      if (value.includes('localhost') && process.env.NODE_ENV === 'production') {
        return 'URL localhost em ambiente de produ√ß√£o';
      }
      if (!value.startsWith('http')) return 'URL deve come√ßar com http/https';
      return null; // v√°lida
    }
  },
  {
    name: 'VITE_SUPABASE_ANON_KEY',
    description: 'Chave an√¥nima do Supabase',
    validate: (value) => {
      if (!value) return 'Vari√°vel n√£o definida';
      if (value.includes('your_actual')) return 'Cont√©m placeholder "your_actual"';
      if (value.length < 50) return 'Chave muito curta (deve ter pelo menos 50 caracteres)';
      if (!value.startsWith('eyJ')) return 'Formato de JWT inv√°lido';
      return null; // v√°lida
    }
  }
];

// Vari√°veis opcionais
const optionalVars = [
  {
    name: 'VITE_GOOGLE_CLIENT_ID',
    description: 'ID do cliente Google OAuth'
  },
  {
    name: 'VITE_META_APP_ID',
    description: 'ID do app Meta/Facebook'
  },
  {
    name: 'VITE_OAUTH_STATE_SECRET',
    description: 'Segredo para prote√ß√£o CSRF do OAuth'
  }
];

function loadEnvFile() {
  const envPath = path.join(process.cwd(), '.env');
  
  if (!fs.existsSync(envPath)) {
    log.warning('Arquivo .env n√£o encontrado');
    return {};
  }
  
  try {
    const envContent = fs.readFileSync(envPath, 'utf8');
    const envVars = {};
    
    envContent.split('\n').forEach(line => {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith('#')) {
        const [key, ...valueParts] = trimmed.split('=');
        if (key && valueParts.length > 0) {
          envVars[key] = valueParts.join('=');
        }
      }
    });
    
    return envVars;
  } catch (error) {
    log.error(`Erro ao ler arquivo .env: ${error.message}`);
    return {};
  }
}

function validateEnvironment() {
  log.info('Iniciando valida√ß√£o de vari√°veis de ambiente...');
  log.info(`Ambiente: ${process.env.NODE_ENV || 'development'}`);
  log.info(`Timestamp: ${new Date().toISOString()}`);
  
  const envFile = loadEnvFile();
  const errors = [];
  const warnings = [];
  
  // Validar vari√°veis obrigat√≥rias
  log.info('\nüìã Validando vari√°veis obrigat√≥rias:');
  
  requiredVars.forEach(varConfig => {
    const value = process.env[varConfig.name] || envFile[varConfig.name];
    const validation = varConfig.validate(value);
    
    if (validation) {
      errors.push(`${varConfig.name}: ${validation}`);
      log.error(`${varConfig.name}: ${validation}`);
    } else {
      log.success(`${varConfig.name}: OK`);
    }
  });
  
  // Verificar vari√°veis opcionais
  log.info('\nüìã Verificando vari√°veis opcionais:');
  
  optionalVars.forEach(varConfig => {
    const value = process.env[varConfig.name] || envFile[varConfig.name];
    
    if (value) {
      if (value.includes('your_actual') || value.includes('placeholder')) {
        warnings.push(`${varConfig.name}: Cont√©m placeholder`);
        log.warning(`${varConfig.name}: Cont√©m placeholder`);
      } else {
        log.success(`${varConfig.name}: Configurada`);
      }
    } else {
      log.warning(`${varConfig.name}: N√£o configurada (opcional)`);
    }
  });
  
  // Verifica√ß√µes espec√≠ficas para produ√ß√£o
  if (process.env.NODE_ENV === 'production') {
    log.info('\nüè≠ Verifica√ß√µes espec√≠ficas de produ√ß√£o:');
    
    const supabaseUrl = process.env.VITE_SUPABASE_URL || envFile.VITE_SUPABASE_URL;
    if (supabaseUrl && supabaseUrl.includes('localhost')) {
      errors.push('VITE_SUPABASE_URL n√£o deve apontar para localhost em produ√ß√£o');
      log.error('VITE_SUPABASE_URL n√£o deve apontar para localhost em produ√ß√£o');
    }
    
    // Verificar se todas as vari√°veis OAuth est√£o configuradas para produ√ß√£o
    const oauthVars = ['VITE_GOOGLE_CLIENT_ID', 'VITE_META_APP_ID'];
    const missingOAuth = oauthVars.filter(varName => {
      const value = process.env[varName] || envFile[varName];
      return !value || value.includes('your_actual');
    });
    
    if (missingOAuth.length > 0) {
      warnings.push(`Vari√°veis OAuth n√£o configuradas: ${missingOAuth.join(', ')}`);
      log.warning(`Vari√°veis OAuth n√£o configuradas: ${missingOAuth.join(', ')}`);
    }
  }
  
  // Relat√≥rio final
  log.info('\nüìä Relat√≥rio de valida√ß√£o:');
  
  if (errors.length > 0) {
    log.error(`${errors.length} erro(s) encontrado(s):`);
    errors.forEach(error => log.error(`  - ${error}`));
  }
  
  if (warnings.length > 0) {
    log.warning(`${warnings.length} aviso(s):`);
    warnings.forEach(warning => log.warning(`  - ${warning}`));
  }
  
  if (errors.length === 0) {
    log.success('Todas as vari√°veis obrigat√≥rias est√£o configuradas corretamente!');
    
    if (warnings.length === 0) {
      log.success('Configura√ß√£o perfeita! ‚ú®');
    } else {
      log.info('Build pode prosseguir, mas considere resolver os avisos.');
    }
    
    return true;
  } else {
    log.error('\nüö´ Build cancelado devido a erros de configura√ß√£o.');
    log.info('\nüí° Para corrigir:');
    log.info('1. Configure as vari√°veis de ambiente no seu servi√ßo de deploy');
    log.info('2. Ou atualize o arquivo .env com valores reais');
    log.info('3. Execute novamente o build');
    
    return false;
  }
}

function generateEnvTemplate() {
  const templatePath = path.join(process.cwd(), '.env.example');
  
  let template = '# Exemplo de configura√ß√£o de vari√°veis de ambiente\n';
  template += '# Copie este arquivo para .env e configure com valores reais\n\n';
  
  template += '# Supabase (OBRIGAT√ìRIO)\n';
  requiredVars.forEach(varConfig => {
    template += `${varConfig.name}=# ${varConfig.description}\n`;
  });
  
  template += '\n# OAuth (OPCIONAL)\n';
  optionalVars.forEach(varConfig => {
    template += `${varConfig.name}=# ${varConfig.description}\n`;
  });
  
  fs.writeFileSync(templatePath, template);
  log.success(`Template criado em ${templatePath}`);
}

// Executar valida√ß√£o
if (require.main === module) {
  const isValid = validateEnvironment();
  
  // Gerar template se solicitado
  if (process.argv.includes('--generate-template')) {
    generateEnvTemplate();
  }
  
  // Sair com c√≥digo de erro se valida√ß√£o falhou
  process.exit(isValid ? 0 : 1);
}

module.exports = { validateEnvironment, generateEnvTemplate };
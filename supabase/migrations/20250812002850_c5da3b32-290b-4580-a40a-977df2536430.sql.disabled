-- FINAL MIGRATION (no IF NOT EXISTS in CREATE POLICY)

-- 1) META ADS INSIGHTS DAILY
CREATE TABLE IF NOT EXISTS public.meta_ads_insights_daily (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  agency_id UUID NOT NULL,
  account_id TEXT NOT NULL,
  campaign_id TEXT,
  adset_id TEXT,
  ad_id TEXT,
  date DATE NOT NULL,
  impressions NUMERIC,
  clicks NUMERIC,
  spend NUMERIC,
  conversions NUMERIC,
  revenue NUMERIC,
  cpc NUMERIC,
  cpa NUMERIC,
  roas NUMERIC,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Create unique index separately to avoid syntax issues
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'ux_meta_ads_insights_daily_key') THEN
        CREATE UNIQUE INDEX ux_meta_ads_insights_daily_key
        ON public.meta_ads_insights_daily (agency_id, account_id, COALESCE(campaign_id, ''), COALESCE(adset_id, ''), COALESCE(ad_id, ''), date);
    END IF;
END
$$;

ALTER TABLE public.meta_ads_insights_daily ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Agency members can view meta ads insights"
ON public.meta_ads_insights_daily
FOR SELECT
USING (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm WHERE tm.agency_id = meta_ads_insights_daily.agency_id
  )
);

CREATE POLICY "Agency admins can manage meta ads insights"
ON public.meta_ads_insights_daily
FOR ALL
USING (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm
    WHERE tm.agency_id = meta_ads_insights_daily.agency_id
      AND tm.role = ANY (ARRAY['owner'::user_role, 'admin'::user_role])
  )
)
WITH CHECK (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm
    WHERE tm.agency_id = meta_ads_insights_daily.agency_id
      AND tm.role = ANY (ARRAY['owner'::user_role, 'admin'::user_role])
  )
);

DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'trg_meta_ads_insights_daily_updated_at'
  ) THEN
    CREATE TRIGGER trg_meta_ads_insights_daily_updated_at
    BEFORE UPDATE ON public.meta_ads_insights_daily
    FOR EACH ROW EXECUTE FUNCTION public.update_modified_column();
  END IF;
END $$;

-- 2) GA4 DAILY
CREATE TABLE IF NOT EXISTS public.ga4_daily (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  agency_id UUID NOT NULL,
  property_id TEXT NOT NULL,
  date DATE NOT NULL,
  sessions NUMERIC,
  users NUMERIC,
  new_users NUMERIC,
  pageviews NUMERIC,
  conversions NUMERIC,
  revenue NUMERIC,
  bounce_rate NUMERIC,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  UNIQUE (agency_id, property_id, date)
);

ALTER TABLE public.ga4_daily ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Agency members can view GA4"
ON public.ga4_daily
FOR SELECT
USING (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm WHERE tm.agency_id = ga4_daily.agency_id
  )
);

CREATE POLICY "Agency admins can manage GA4"
ON public.ga4_daily
FOR ALL
USING (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm
    WHERE tm.agency_id = ga4_daily.agency_id
      AND tm.role = ANY (ARRAY['owner'::user_role, 'admin'::user_role])
  )
)
WITH CHECK (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm
    WHERE tm.agency_id = ga4_daily.agency_id
      AND tm.role = ANY (ARRAY['owner'::user_role, 'admin'::user_role])
  )
);

DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'trg_ga4_daily_updated_at'
  ) THEN
    CREATE TRIGGER trg_ga4_daily_updated_at
    BEFORE UPDATE ON public.ga4_daily
    FOR EACH ROW EXECUTE FUNCTION public.update_modified_column();
  END IF;
END $$;

-- 3) SEARCH CONSOLE PAGES DAILY
CREATE TABLE IF NOT EXISTS public.search_console_pages_daily (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  agency_id UUID NOT NULL,
  site_url TEXT NOT NULL,
  page TEXT NOT NULL,
  date DATE NOT NULL,
  clicks NUMERIC,
  impressions NUMERIC,
  ctr NUMERIC,
  position NUMERIC,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  UNIQUE (agency_id, site_url, page, date)
);

ALTER TABLE public.search_console_pages_daily ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Agency members can view SC pages"
ON public.search_console_pages_daily
FOR SELECT
USING (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm WHERE tm.agency_id = search_console_pages_daily.agency_id
  )
);

CREATE POLICY "Agency admins can manage SC pages"
ON public.search_console_pages_daily
FOR ALL
USING (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm
    WHERE tm.agency_id = search_console_pages_daily.agency_id
      AND tm.role = ANY (ARRAY['owner'::user_role, 'admin'::user_role])
  )
)
WITH CHECK (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm
    WHERE tm.agency_id = search_console_pages_daily.agency_id
      AND tm.role = ANY (ARRAY['owner'::user_role, 'admin'::user_role])
  )
);

DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'trg_sc_pages_daily_updated_at'
  ) THEN
    CREATE TRIGGER trg_sc_pages_daily_updated_at
    BEFORE UPDATE ON public.search_console_pages_daily
    FOR EACH ROW EXECUTE FUNCTION public.update_modified_column();
  END IF;
END $$;

-- 4) ALERTS LOG
CREATE TABLE IF NOT EXISTS public.alerts_log (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  agency_id UUID NOT NULL,
  alert_type public.alert_type NOT NULL,
  severity TEXT,
  message TEXT,
  meta JSONB NOT NULL DEFAULT '{}'::jsonb,
  channels JSONB NOT NULL DEFAULT '[]'::jsonb,
  sent_to JSONB NOT NULL DEFAULT '[]'::jsonb,
  status TEXT NOT NULL DEFAULT 'queued',
  error TEXT,
  created_by UUID,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

ALTER TABLE public.alerts_log ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Agency members can view alerts log"
ON public.alerts_log
FOR SELECT
USING (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm WHERE tm.agency_id = alerts_log.agency_id
  )
);

CREATE POLICY "Agency admins can manage alerts log"
ON public.alerts_log
FOR ALL
USING (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm
    WHERE tm.agency_id = alerts_log.agency_id
      AND tm.role = ANY (ARRAY['owner'::user_role, 'admin'::user_role])
  )
)
WITH CHECK (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm
    WHERE tm.agency_id = alerts_log.agency_id
      AND tm.role = ANY (ARRAY['owner'::user_role, 'admin'::user_role])
  )
);

-- 5) N8N EVENTS
CREATE TABLE IF NOT EXISTS public.n8n_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  agency_id UUID NOT NULL,
  event_type TEXT NOT NULL,
  payload JSONB NOT NULL DEFAULT '{}'::jsonb,
  status TEXT NOT NULL DEFAULT 'pending',
  response JSONB,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  processed_at TIMESTAMPTZ
);

ALTER TABLE public.n8n_events ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Agency members can view n8n events"
ON public.n8n_events
FOR SELECT
USING (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm WHERE tm.agency_id = n8n_events.agency_id
  )
);

CREATE POLICY "Agency admins can manage n8n events"
ON public.n8n_events
FOR ALL
USING (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm
    WHERE tm.agency_id = n8n_events.agency_id
      AND tm.role = ANY (ARRAY['owner'::user_role, 'admin'::user_role])
  )
)
WITH CHECK (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm
    WHERE tm.agency_id = n8n_events.agency_id
      AND tm.role = ANY (ARRAY['owner'::user_role, 'admin'::user_role])
  )
);

-- 6) AI REQUESTS
CREATE TABLE IF NOT EXISTS public.ai_requests (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  agency_id UUID NOT NULL,
  user_id UUID NOT NULL,
  prompt TEXT NOT NULL,
  context JSONB NOT NULL DEFAULT '{}'::jsonb,
  status TEXT NOT NULL DEFAULT 'queued',
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

ALTER TABLE public.ai_requests ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Manage own AI requests or admin"
ON public.ai_requests
FOR ALL
USING (
  (user_id = auth.uid()) OR (
    auth.uid() IN (
      SELECT tm.id FROM public.team_members tm
      WHERE tm.agency_id = ai_requests.agency_id
        AND tm.role = ANY (ARRAY['owner'::user_role, 'admin'::user_role])
    )
  )
)
WITH CHECK (
  (user_id = auth.uid()) OR (
    auth.uid() IN (
      SELECT tm.id FROM public.team_members tm
      WHERE tm.agency_id = ai_requests.agency_id
        AND tm.role = ANY (ARRAY['owner'::user_role, 'admin'::user_role])
    )
  )
);

DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'trg_ai_requests_updated_at'
  ) THEN
    CREATE TRIGGER trg_ai_requests_updated_at
    BEFORE UPDATE ON public.ai_requests
    FOR EACH ROW EXECUTE FUNCTION public.update_modified_column();
  END IF;
END $$;

-- 7) AI RESULTS
CREATE TABLE IF NOT EXISTS public.ai_results (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  request_id UUID NOT NULL REFERENCES public.ai_requests(id) ON DELETE CASCADE,
  agency_id UUID NOT NULL,
  content JSONB NOT NULL,
  score NUMERIC,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

ALTER TABLE public.ai_results ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Agency members can view AI results"
ON public.ai_results
FOR SELECT
USING (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm WHERE tm.agency_id = ai_results.agency_id
  )
);

CREATE POLICY "Agency admins can manage AI results"
ON public.ai_results
FOR ALL
USING (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm
    WHERE tm.agency_id = ai_results.agency_id
      AND tm.role = ANY (ARRAY['owner'::user_role, 'admin'::user_role])
  )
)
WITH CHECK (
  auth.uid() IN (
    SELECT tm.id FROM public.team_members tm
    WHERE tm.agency_id = ai_results.agency_id
      AND tm.role = ANY (ARRAY['owner'::user_role, 'admin'::user_role])
  )
);

-- 8) Helpful indexes
CREATE INDEX IF NOT EXISTS idx_meta_ads_insights_daily_agency_date ON public.meta_ads_insights_daily (agency_id, date);
CREATE INDEX IF NOT EXISTS idx_ga4_daily_agency_date ON public.ga4_daily (agency_id, date);
CREATE INDEX IF NOT EXISTS idx_sc_pages_daily_agency_date ON public.search_console_pages_daily (agency_id, date);
CREATE INDEX IF NOT EXISTS idx_alerts_log_agency_created_at ON public.alerts_log (agency_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_n8n_events_agency_created_at ON public.n8n_events (agency_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_ai_results_agency_created_at ON public.ai_results (agency_id, created_at DESC);
